//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// StandaloneNet.cpp
//
// Code generation for function 'StandaloneNet'
//

// Include files
#include "StandaloneNet.h"
#include <cmath>

// Function Definitions
double StandaloneNet(const double x1[6])
{
  static const double d_a[30]{
      0.96793399973677507,  0.52171610459870066,    -0.15920605226724829,
      0.66204641322433566,  0.013854410636190749,   -1.0436864961378236,
      -1.0924990475365413,  0.81909746425727581,    0.91799795681920382,
      0.9206664621509153,   -0.78092010313233373,   0.70981155076769642,
      0.95861704559401362,  -0.24900106139099237,   0.58031143768036653,
      -0.99360783875450753, -0.0029182978678813361, 1.5410318056024546,
      0.84415253422634062,  0.99133083901966867,    0.18308099080758927,
      -1.0139890075467688,  0.51139621828573556,    1.1137468083020154,
      0.46122298834362596,  0.46939727275511539,    0.53694528632468808,
      -0.13091089087460706, 0.45653881238382443,    -0.675738109400605};
  static const double dv[6]{
      0.0119020695012414, 0.0, 0.0, 0.0, 0.00115105712910724,
      0.0195776235533187};
  static const double dv1[6]{2.08617855000028,    0.00784313725490196,
                             0.00784313725490196, 0.00784313725490196,
                             0.00138924566902992, 0.00157439664197525};
  static const double b_a[5]{0.30091946055833851, -0.099075282929408648,
                             1.345351943406873, -0.43592683563943352,
                             -0.14054285173003889};
  static const double c_a[5]{-1.8503101864255906, -0.83636874301622743,
                             -0.27723800765223228, 1.1384157684859066,
                             2.0801504012113661};
  double xp1[6];
  double a;
  // STANDALONENET neural network simulation function.
  //
  //  Auto-generated by MATLAB, 29-Feb-2024 01:50:59.
  //
  //  [y1] = StandaloneNet(x1) takes these arguments:
  //    x = 6xQ matrix, input #1
  //  and returns:
  //    y = 1xQ matrix, output #1
  //  where Q is the number of samples.
  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  for (int k{0}; k < 6; k++) {
    xp1[k] = (x1[k] - dv[k]) * dv1[k] - 1.0;
  }
  //  Layer 1
  //  Sigmoid Symmetric Transfer Function
  //  Layer 2
  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  a = 0.0;
  for (int k{0}; k < 5; k++) {
    double d;
    d = 0.0;
    for (int i{0}; i < 6; i++) {
      d += d_a[k + 5 * i] * xp1[i];
    }
    a += b_a[k] * (2.0 / (std::exp(-2.0 * (c_a[k] + d)) + 1.0) - 1.0);
  }
  return ((a + 0.83243849854225627) - -1.0) / 0.5 + 1.0;
}

// End of code generation (StandaloneNet.cpp)
